// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: src/proto/helloworld/v1/helloworld.proto

package helloworldv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tsingson/grpc-demo/src/proto/helloworld/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreeterName is the fully-qualified name of the Greeter service.
	GreeterName = "helloworld.v1.Greeter"
)

// GreeterClient is a client for the helloworld.v1.Greeter service.
type GreeterClient interface {
	// Sends a greeting
	SayHello(context.Context, *connect_go.Request[v1.SayHelloRequest]) (*connect_go.Response[v1.SayHelloResponse], error)
}

// NewGreeterClient constructs a client for the helloworld.v1.Greeter service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreeterClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greeterClient{
		sayHello: connect_go.NewClient[v1.SayHelloRequest, v1.SayHelloResponse](
			httpClient,
			baseURL+"/helloworld.v1.Greeter/SayHello",
			opts...,
		),
	}
}

// greeterClient implements GreeterClient.
type greeterClient struct {
	sayHello *connect_go.Client[v1.SayHelloRequest, v1.SayHelloResponse]
}

// SayHello calls helloworld.v1.Greeter.SayHello.
func (c *greeterClient) SayHello(ctx context.Context, req *connect_go.Request[v1.SayHelloRequest]) (*connect_go.Response[v1.SayHelloResponse], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// GreeterHandler is an implementation of the helloworld.v1.Greeter service.
type GreeterHandler interface {
	// Sends a greeting
	SayHello(context.Context, *connect_go.Request[v1.SayHelloRequest]) (*connect_go.Response[v1.SayHelloResponse], error)
}

// NewGreeterHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterHandler(svc GreeterHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/helloworld.v1.Greeter/SayHello", connect_go.NewUnaryHandler(
		"/helloworld.v1.Greeter/SayHello",
		svc.SayHello,
		opts...,
	))
	return "/helloworld.v1.Greeter/", mux
}

// UnimplementedGreeterHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterHandler struct{}

func (UnimplementedGreeterHandler) SayHello(context.Context, *connect_go.Request[v1.SayHelloRequest]) (*connect_go.Response[v1.SayHelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("helloworld.v1.Greeter.SayHello is not implemented"))
}
